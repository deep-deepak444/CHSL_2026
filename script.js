// Service Worker рдХреЛ рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░рдиреЗ рдХрд╛ рдХреЛрдб
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/service-worker.js')
      .then(registration => {
        console.log('Service Worker registered successfully:', registration);
      })
      .catch(error => {
        console.log('Service Worker registration failed:', error);
      });
  });
}

// --- рдпрд╣рд╛рдБ рд░реИрдВрдбрдо рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдирдпрд╛ рдлрдВрдХреНрд╢рди рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИ ---
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// рдЧреНрд▓реЛрдмрд▓ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕
let questions = [];
let videoURL = null;
let currentIndex = 0;
let score = 0;
let timerInterval;
let attemptedCount = 0;

// localStorage рд╕реЗ рдпреВрдЬрд░ рдХрд╛ рдирд╛рдо рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
const userData = JSON.parse(localStorage.getItem("deepStudyUser"));
const userName = userData ? userData.name : "User";

// URL рд╕реЗ рд╡рд┐рд╖рдп рдФрд░ рдЯреЙрдкрд┐рдХ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
const urlParams = new URLSearchParams(window.location.search);
const subject = urlParams.get("subject");
const topic = urlParams.get("topic");

// --- рдХреНрд╡рд┐рдЬрд╝ рд░рд┐рдЬреНрдпреВрдо рдХрд░рдиреЗ рдХрд╛ рд▓реЙрдЬрд┐рдХ ---
const savedProgress = JSON.parse(localStorage.getItem('quizProgress'));

if (savedProgress && savedProgress.subject === subject && savedProgress.topic === topic) {
  currentIndex = savedProgress.currentIndex;
  score = savedProgress.score;
  attemptedCount = savedProgress.attemptedCount || 0;
}

// рдкреНрд░рд╢реНрдиреЛрдВ рд╡рд╛рд▓реА JSON рдлрд╝рд╛рдЗрд▓ рдХреЛ рд▓реЛрдб рдХрд░реЗрдВ
fetch(`subjects/${subject}/${topic}.json`)
  .then(res => {
    if (!res.ok) { throw new Error('Network response was not ok'); }
    return res.json();
  })
  .then(data => {
    let fetchedQuestions = data.questions;
    videoURL = data.video;
    shuffleArray(fetchedQuestions);
    questions = fetchedQuestions;

    document.getElementById("topic-name").textContent = "ЁЯУЦ " + data.topic;
    showQuestion();
    startTimer();
  })
  .catch(error => {
    console.error('Failed to load quiz:', error);
    document.querySelector(".quiz-container").innerHTML = `<h2>рдЕрднреА рддрдХ Youtube SUBSCRIBE рдХрдо рд╣реЛрдиреЗ рдХреЗ рдХрд╛рд░рдг рдЗрд╕ рд╡рд┐рд╖рдп рдХреА quiz upload рдирд╣реАрдВ рдХреА рдЧрдИ рд╣реИ ред рдХреГрдкрдпрд╛ рд╕рд╣рдпреЛрдЧ рдХрд░реЗрдВред</h2>`;
  });

// рдкреНрд░рд╢реНрди рдФрд░ рд╡рд┐рдХрд▓реНрдк рджрд┐рдЦрд╛рдиреЗ рд╡рд╛рд▓рд╛ рдлрдВрдХреНрд╢рди
function showQuestion() {
    // рдХреНрд╡рд┐рдЬрд╝ рдЪрд▓рдиреЗ рдХреЗ рджреМрд░рд╛рди Back рдмрдЯрди рдХреЛ рдЫрд┐рдкрд╛ рджреЗрдВ
    document.querySelector('.back-btn').style.display = 'none';

    if (currentIndex >= questions.length) {
        endQuiz();
        return;
    }

    const q = questions[currentIndex];
    const questionBox = document.getElementById("question-box");
    const optionsDiv = document.getElementById("options");
    
    // рдкрд╣рд▓реЗ рдкреБрд░рд╛рдиреЗ рдХрдВрдЯреЗрдВрдЯ рдХреЛ рд╕рд╛рдл рдХрд░реЗрдВ
    questionBox.innerHTML = ''; 
    optionsDiv.innerHTML = '';

    // рдЕрдм рдкреНрд░рд╢реНрди рдХреЗ 'type' рдХреЗ рдЖрдзрд╛рд░ рдкрд░ HTML рдмрдирд╛рдПрдБ
    if (q.type === 'statement' && q.statements) {
        // рдХрдерди рд╡рд╛рд▓реЗ рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП
        questionBox.innerHTML = `<p>Q${currentIndex + 1}. ${q.question}</p>`;
        const statementsContainer = document.createElement('div');
        statementsContainer.className = 'statements-container';
        q.statements.forEach(stmt => {
            const p = document.createElement('p');
            p.className = 'statement-item';
            p.textContent = stmt;
            statementsContainer.appendChild(p);
        });
        questionBox.appendChild(statementsContainer);

    } else if (q.type === 'match' && q.list1 && q.list2) {
        // рд╕реВрдЪреА-рдорд┐рд▓рд╛рди рд╡рд╛рд▓реЗ рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП
        questionBox.innerHTML = `<p>Q${currentIndex + 1}. ${q.question}</p>`;
        const matchContainer = document.createElement('div');
        matchContainer.className = 'match-container';

        // List 1 рдмрдирд╛рдиреЗ рдХрд╛ рдХреЛрдб
        const list1Div = document.createElement('div');
        list1Div.className = 'match-list';
        let list1HTML = `<h4>${q.list1.title}</h4><ul>`;
        q.list1.items.forEach(item => { list1HTML += `<li>${item}</li>`; });
        list1HTML += '</ul>';
        list1Div.innerHTML = list1HTML;

        // List 2 рдмрдирд╛рдиреЗ рдХрд╛ рдХреЛрдб
        const list2Div = document.createElement('div');
        list2Div.className = 'match-list';
        let list2HTML = `<h4>${q.list2.title}</h4><ul>`;
        q.list2.items.forEach(item => { list2HTML += `<li>${item}</li>`; });
        list2HTML += '</ul>';
        list2Div.innerHTML = list2HTML;
        
        matchContainer.appendChild(list1Div);
        matchContainer.appendChild(list2Div);
        questionBox.appendChild(matchContainer);

    } else {
        // рд╕рд╛рдзрд╛рд░рдг рдкреНрд░рд╢реНрди (Default)
        questionBox.textContent = `Q${currentIndex + 1}. ${q.question}`;
    }

    // рд╡рд┐рдХрд▓реНрдк (Options) рдмрдирд╛рдиреЗ рдХрд╛ рдХреЛрдб рд╕рднреА рдкреНрд░рдХрд╛рд░ рдХреЗ рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рдорд╛рди рд░рд╣реЗрдЧрд╛
    q.options.forEach(opt => {
        let btn = document.createElement("button");
        btn.className = "option-btn";
        btn.textContent = opt;
        btn.onclick = () => checkAnswer(btn, q.answer);
        optionsDiv.appendChild(btn);
    });

    const skipBtn = document.createElement("button");
    skipBtn.className = "option-btn skip";
    skipBtn.textContent = "Skip тЭУ";
    skipBtn.onclick = () => nextQuestion();
    optionsDiv.appendChild(skipBtn);
}

// рдЙрддреНрддрд░ рдХреА рдЬрд╛рдБрдЪ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдлрдВрдХреНрд╢рди
function checkAnswer(selectedBtn, correct) {
  attemptedCount++;
  document.querySelectorAll(".option-btn").forEach(btn => {
    btn.disabled = true;
    if (btn.textContent === correct) {
      btn.classList.add("correct");
      if (btn === selectedBtn) {
        score++;
        showMessage();
      }
    } else if (btn === selectedBtn) {
      btn.classList.add("wrong", "shake");
    }
  });

  setTimeout(() => {
    nextQuestion();
  }, 800);
}

// рдЕрдЧрд▓рд╛ рдкреНрд░рд╢реНрди рджрд┐рдЦрд╛рдиреЗ рд╡рд╛рд▓рд╛ рдлрдВрдХреНрд╢рди
function nextQuestion() {
  const progress = {
    subject: subject,
    topic: topic,
    currentIndex: currentIndex + 1,
    score: score,
    attemptedCount: attemptedCount
  };
  localStorage.setItem('quizProgress', JSON.stringify(progress));

  currentIndex++;
  showQuestion();
}

// endQuiz рдлрдВрдХреНрд╢рди
// endQuiz рдлрдВрдХреНрд╢рди рдХрд╛ рдирдпрд╛ рдФрд░ рдЕрдкрдбреЗрдЯреЗрдб рд╕рдВрд╕реНрдХрд░рдг
function endQuiz() {
  const totalQuestions = questions.length;
  const correctAnswers = score;
  const attemptedQuestions = attemptedCount;
  const wrongAnswers = attemptedQuestions - correctAnswers;
  const unattemptedQuestions = totalQuestions - attemptedQuestions;
  const percentage = totalQuestions > 0 ? (correctAnswers / totalQuestions) * 100 : 0;

  let message = "";
  if (percentage >= 80) {
    message = `ЁЯОЙ рд╢рд╛рдмрд╛рд╢, ${userName}! рдмреЗрд╣рддрд░реАрди рдкреНрд░рджрд░реНрд╢рди!`;
  } else if (percentage >= 60) {
    message = `ЁЯСН рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛, ${userName}! рдЖрдк рд╕рд╣реА рд░рд╛рд╕реНрддреЗ рдкрд░ рд╣реИрдВред`;
  } else if (percentage >= 40) {
    message = `ЁЯШК рдЖрдкрдХрд╛ рдкреНрд░рдпрд╛рд╕ рдЕрдЪреНрдЫрд╛ рд░рд╣рд╛, рдереЛрдбрд╝рд╛ рдФрд░ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВред`;
  } else {
    message = `ЁЯТк ${userName}, рдЖрдкрдХреЛ рдЕрднреА рдФрд░ рдореЗрд╣рдирдд рдХреА рдЬрд░реВрд░рдд рд╣реИред`;
  }

  const history = JSON.parse(localStorage.getItem('deepStudyHistory')) || [];
  const newResult = {
    subject: subject,
    topic: topic,
    score: correctAnswers,
    total: totalQuestions,
    date: new Date().toLocaleDateString("hi-IN", { day: 'numeric', month: 'long', year: 'numeric' })
  };
  history.push(newResult);
  localStorage.setItem('deepStudyHistory', JSON.stringify(history));
  localStorage.removeItem('quizProgress');

  document.querySelector('.back-btn').style.display = 'block';

  clearInterval(timerInterval);
  document.querySelector(".quiz-container").style.display = "none";
  let resultBox = document.getElementById("result-box");
  resultBox.style.display = "block";

  // --- рдпрд╣рд╛рдБ рд╕реЗ рдирдпрд╛ рдХреЛрдб рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИ ---

  // YouTube рдмрдЯрди рдХрд╛ HTML рдмрдирд╛рдПрдБ (рд╕рд┐рд░реНрдл рддрднреА рдЬрдм videoURL рдореМрдЬреВрдж рд╣реЛ)
  const videoButtonHTML = videoURL 
    ? `<a href="${videoURL}" target="_blank" class="result-action-btn youtube">
         тЦ╢я╕П рдХреЙрдиреНрд╕реЗрдкреНрдЯ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЗрдВ
       </a>` 
    : '';

  // Telegram рдмрдЯрди рдХрд╛ HTML рдмрдирд╛рдПрдБ (рдпрд╣рд╛рдБ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдХрд╛ рд╕рд╣реА рд▓рд┐рдВрдХ рдбрд╛рд▓реЗрдВ)
  const telegramButtonHTML = `
    <a href="https://t.me/deepstudy_official" target="_blank" class="result-action-btn telegram">
      ЁЯТм рдбрд╛рдЙрдЯ рдкреВрдЫреЗрдВ
    </a>`;

  // --- рдпрд╣рд╛рдБ рддрдХ рдирдпрд╛ рдХреЛрдб рд╣реИ ---


  resultBox.innerHTML = `
    <div class="result-card-details">
      <h3 class="result-topic">${topic.replace(/_/g, ' ').toUpperCase()}</h3>
      <p class="result-message">${message}</p>
      <div class="stats-container">
        <div class="stat-row">
          <span class="stat-label">рдХреБрд▓ рдкреНрд░рд╢реНрди :</span>
          <span class="stat-value">${totalQuestions}</span>
        </div>
        <div class="stat-row">
          <span class="stat-label">рдкреНрд░рдпрд╛рд╕ рдХрд┐рдП :</span>
          <span class="stat-value">${attemptedQuestions}</span>
        </div>
        <div class="stat-row">
          <span class="stat-label">рд╕рд╣реА рдЙрддреНрддрд░ ЁЯСН:</span>
          <span class="stat-value correct">${correctAnswers}</span>
        </div>
        <div class="stat-row">
          <span class="stat-label">рдЧрд▓рдд рдЙрддреНрддрд░ ЁЯСО:</span>
          <span class="stat-value wrong">${wrongAnswers}</span>
        </div>
        <div class="stat-row">
          <span class="stat-label">рдЫреЛрдбрд╝реЗ рдЧрдП рдкреНрд░рд╢реНрди :</span>
          <span class="stat-value unattempted">${unattemptedQuestions}</span>
        </div>
      </div>
      
      <div class="result-actions">
        ${videoButtonHTML}
        ${telegramButtonHTML}
      </div>
    </div>
  `;
}

// рдЯреЛрд╕реНрдЯ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рджрд┐рдЦрд╛рдиреЗ рд╡рд╛рд▓рд╛ рдлрдВрдХреНрд╢рди
function showToast(message) {
  const toast = document.createElement("div");
  toast.className = "toast-notification";
  toast.textContent = message;
  document.body.appendChild(toast);

  setTimeout(() => toast.classList.add("show"), 100);

  setTimeout(() => {
    toast.classList.remove("show");
    setTimeout(() => toast.remove(), 500);
  }, 3000);
}

// рд╕реНрдХреЛрд░ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдореИрд╕реЗрдЬ рджрд┐рдЦрд╛рдиреЗ рд╡рд╛рд▓рд╛ рдлрдВрдХреНрд╢рди
function showMessage() {
  if (score === 5) showToast("ЁЯОЙ рдмрд╣реБрдд рдЕрдЪреНрдЫреЗ, " + userName + "!");
  if (score === 10) showToast("ЁЯСН рд╢рд╛рдирджрд╛рд░, " + userName + "!");
  if (score === 15) showToast("ЁЯЪА рдмреЗрд╣рддрд░реАрди рдкреНрд░рджрд░реНрд╢рди, " + userName + "!");
}

// рдЯреЙрдкрд┐рдХреНрд╕ рдкреЗрдЬ рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рд╡рд╛рд▓рд╛ рдлрдВрдХреНрд╢рди
function goBack() {
  window.location.href = `topics.html?subject=${subject}`;
}

// рдЯрд╛рдЗрдорд░ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдлрдВрдХреНрд╢рди
function startTimer() {
  let timeLeft = 50 * 60; // 20 рдорд┐рдирдЯ
  const timerEl = document.getElementById("timer");

  timerInterval = setInterval(() => {
    if (timeLeft <= 0) {
      clearInterval(timerInterval);
      endQuiz();
      return;
    }
    let min = Math.floor(timeLeft / 60);
    let sec = timeLeft % 60;
    timerEl.textContent = `${min}:${sec < 10 ? "0" + sec : sec}`;
    timeLeft--;
  }, 1000);
}

// рд░рд╛рдЗрдЯ-рдХреНрд▓рд┐рдХ рдореЗрдиреВ рдХреЛ рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП
window.addEventListener('contextmenu', function (e) { 
  e.preventDefault(); 
}, false);
